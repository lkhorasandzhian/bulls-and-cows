using System;

namespace Game
{
    class Program
    {
        /// <summary>
        /// Точка входа программы, тут происходит генерация числа,
        /// вызов необходимых методов.
        /// </summary>
        static void Main()
        {
            do
            {
                // Инициализация цифр n1 (разряд единиц тысяч), n2 (разряд сотен),
                // n3 (разряд десятков), n4(разряд единиц) и присваивание нулей по умолчанию.
                int n1 = 0, n2 = 0, n3 = 0, n4 = 0;

                // Генерация рандомных цифр загадываемого программой числа.
                RandGenerator(ref n1, ref n2, ref n3, ref n4);

                // Счётчик коров и быков, соответственно.
                int count_c, count_b;

                do
                {
                    Console.Write("Ваше предположение: ", InputData(out int x));
                    Console.WriteLine(x);

                    // Обнуление счётчика коров и быков.
                    count_c = 0;
                    count_b = 0;

                    // Стартовая позиция цифры (например, если n1, то pos = 1).
                    int pos = 1;

                    // Сравнение введённой в метод радномно сгенерированной цифры с цифрой числа, введённого игроком.
                    Checkup(n1, ref pos, x, ref count_c, ref count_b);
                    Checkup(n2, ref pos, x, ref count_c, ref count_b);
                    Checkup(n3, ref pos, x, ref count_c, ref count_b);
                    Checkup(n4, ref pos, x, ref count_c, ref count_b);

                    // Вывод кол-ва коров и быков по результатам сравнения цифр.
                    OutputData(count_c, count_b);
                } while (count_b != 4 && Console.ReadKey(true).Key != ConsoleKey.Escape);

                Console.WriteLine("Нажмите R для новой партии, для выхода из игры — любую другую клавишу...\n");
            } while (Console.ReadKey(true).Key == ConsoleKey.R);
        }

        /// <summary>
        /// Отвечает за вывод данных о результатах игры.
        /// </summary>
        /// <param name="cows">
        /// Входной параметр, принимающий за входные данные количество коров.
        /// </param>
        /// <param name="bools">
        /// Входной параметр, принимающий за входные данные количество быков.
        /// </param>
        static void OutputData(int cows, int bools)
        {
            Console.WriteLine($"Всего коров: {cows}, всего быков: {bools}");

            // Разные выводы на экран в зависимости от того, угадано число или нет.
            if (bools == 4)
            {
                Console.WriteLine("Ура, вы угадали число!");
                Console.WriteLine("Нажмите любую клавишу для выхода...");
            }
            else
            {
                Console.WriteLine("К сожалению, вы не угадали число...");
                Console.WriteLine("Нажмите любую клавишу для продолжения или Esc для завершения текущей партии...\n");
            }
        }

        /// <summary>
        /// Отвечает за вввод игроком корректного числа.
        /// </summary>
        /// <param name="input">
        /// Входной параметр, принимающий за входные данные введённое игроком число.
        /// </param>
        /// <returns>
        /// Уже корректно введённое игроком число.
        /// </returns>
        static int InputData(out int input)
        {
            // Логическая переменна, принимающая "true" и "false" при корректном и некорректом вводе, соответственно.
            bool correct;

            // Цикл с пост-условием, выполняющийся пока не будет введены корректные данные.
            do
            {
                Console.Write("Введите 4-ёх значное число без ведущих нулей и без повторяющихся цифр: ");
                correct = int.TryParse(Console.ReadLine(), out input);

                // Проверка на 4-ёх значность.
                if (input < 1000 || input > 9999)
                {
                    correct = false;
                }

                // Проверка через метод на совпадение цифр в введённом игроком числе.
                correct = EqualDigits(input);

                // При некорректных данных сообщить об этом игроку.
                if (!correct)
                {
                    Console.WriteLine("Введены некорректные данные! Повторите попытку...\n");
                }
            } while (!correct);
            return input;
        }

        /// <summary>
        /// Сравнивает цифры у введённого игроком числа на совпадение.
        /// </summary>
        /// <param name="input">
        /// Введёное игроком число (на данном этапе не обязательно корректное).
        /// </param>
        /// <returns>
        /// Буллевое true, если цифры не совпали, иначе — буллевое false.
        /// </returns>
        static bool EqualDigits(int input)
        {
            // Взятие индекса (слева направо от 1 до 4 не включительно) первой цифры из введённого игроком числа.
            for (int i = 1; i < 4; i++)
            {
                // Взятие индекса (слева направо от 1 до 4 включительно) второй цифры из введённого игроком числа.
                for (int j = i + 1; j <= 4; j++)
                {
                    // Подсчёт первой и второй цифры загаданного игрком числа и
                    // проверка на равенство друг с другом. Если совпало, то вернуть false.
                    if ((int)(input / Math.Pow(10, (4 - i)) % 10) == (int)(input / Math.Pow(10, (4 - j)) % 10))
                    {
                        return false;
                    }
                }
            }

            // Если два цикла for полностью завершатся, то совпадающих цифр обнаружено не было, а значит
            // возвращаем значение true.
            return true;
        }

        /// <summary>
        /// Генератор рандомных цифр.
        /// </summary>
        /// <param name="num1">
        /// Первая цифра в генерируемом рандомном числе.
        /// </param>
        /// <param name="num2">
        /// Вторая цифра в генерируемом рандомном числе.
        /// </param>
        /// <param name="num3">
        /// Третья цифра в генерируемом рандомном числе.
        /// </param>
        /// <param name="num4">
        /// Четвёртая цифра в генерируемом рандомном числе.
        /// </param>
        static void RandGenerator(ref int num1, ref int num2, ref int num3, ref int num4)
        {
            Random random = new Random();

            // Для каждой цифры, начиная с n1, берём рандомное число от 1 до 9,
            // пока не получим цифру, не совпадающую с предыдущими.
            num1 = random.Next(1, 10);
            do
            {
                num2 = random.Next(0, 10);
            } while (num2 == num1);
            do
            {
                num3 = random.Next(0, 10);
            } while (num3 == num1 || num3 == num2);
            do
            {
                num4 = random.Next(0, 10);
            } while (num4 == num1 || num4 == num2 || num4 == num3);
        }


        /// <summary>
        /// Проверяющий конкретную цифру рандомного сгенерированного числа со всеми цифрами введённого пользователем числа.
        /// </summary>
        /// <param name="digit">
        /// Цифра радномного сгенерированного числа.
        /// </param>
        /// <param name="positon">
        /// Индекс цифры (слева направо от 1 до 4) рандомного сгенерированного числа.
        /// </param>
        /// <param name="input">
        /// Корректно введённое игроком число.
        /// </param>
        /// <param name="count_cows">
        /// Общий счётчик коров.
        /// </param>
        /// <param name="count_bools">
        /// Общий счётчик быков.
        /// </param>
        static void Checkup(int digit, ref int positon, int input, ref int count_cows, ref int count_bools)
        {
            // Индекс цифры введённого числа (от 1 до 4 слева направо)
            int i = 1;

            // Цикл с пост-условием для индексов от 1 до 4 включительно.
            do
            {
                // Сравнение цифры рандомно загаданного числа с цифрой введённого игроком числа.
                if (digit == (int)(input / Math.Pow(10, (4 - i)) % 10))
                {
                    // Если цифры совпали, то это, как минимум, корова.
                    count_cows += 1;

                    // Проверка индексов цифр в своих числах. Если равны, то
                    // увеличить счётчик быка на 1 и уменьшить счётчик коровы на 1.
                    if (positon == i)
                    {
                        count_bools += 1;
                        count_cows -= 1;

                        // Досрочно прекратить цикл, поскольку одна и та же цифра
                        // не может дать ещё быков или коров, так как по правилам игры (если что, читать README)
                        // она встречается в сгенерированном числе ровно один раз.
                        break;
                    }
                }

                // Увеличить индекс цифры введённого числа (от 1 до 4 слева направо) для сверки следующей цифры.
                i += 1;
            } while (i < 5);

            // Переменная, отвечающая за индекс цифры рандомного загаданного числа.
            // К значению переменной прибавляем 1 для следующего метода Checkup
            // в основном методе Main.
            positon += 1;
        }
    }
}
